{"version":3,"sources":["assets/img/avataaars.svg","Component/Header/Hero/index.js","Component/Header/MainHeader/index.js","Component/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Hero","props","className","src","require","alt","MainHeader","useState","setShow","position","setPosition","useEffect","handle","window","addEventListener","removeEventListener","document","body","getBoundingClientRect","top","Navbar","collapseOnSelect","expand","id","Container","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","NavDropdown","title","Item","Divider","Header","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wLAAAA,EAAOC,QAAU,IAA0B,uC,yHC6B5BC,EArBF,SAACC,GACV,OACI,yBAAKC,UAAU,8CACX,yBAAKA,UAAU,mDACX,yBAAKA,UAAU,uBAAuBC,IAAKC,EAAQ,IAAsCC,IAAI,KAC7F,wBAAIH,UAAU,wCAAd,mBACA,yBAAKA,UAAU,gCACX,yBAAKA,UAAU,wBACf,yBAAKA,UAAU,uBACX,kBAAC,IAAD,OAEJ,yBAAKA,UAAU,yBAEnB,uBAAGA,UAAU,8CAAb,kD,wCC4BDI,EA1CI,SAACL,GAAW,IAAD,EACFM,oBAAS,GADP,mBACbC,GADa,aAEMD,mBAAS,GAFf,mBAEnBE,EAFmB,KAETC,EAFS,KAG1BC,qBAAU,WAGN,OAFAC,IACAC,OAAOC,iBAAiB,SAAUF,GAC3B,WACHC,OAAOE,oBAAoB,SAAUH,MAE1C,CAACH,IACJ,IAAMG,EAAS,WACXF,EAAYM,SAASC,KAAKC,wBAAwBC,KAClDX,EAAQQ,SAASC,KAAKC,wBAAwBC,IAAMV,IAIxD,OACI,oCACI,kBAACW,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKpB,UAAU,mFAAmFqB,GAAG,WACjI,kBAACC,EAAA,EAAD,KACI,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SAAnB,aACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,wBAAwB1B,UAAU,0BAC/D,kBAACkB,EAAA,EAAOS,SAAR,CAAiBN,GAAG,yBAChB,kBAACO,EAAA,EAAD,CAAK5B,UAAU,WACX,kBAAC4B,EAAA,EAAIC,KAAL,CAAUL,KAAK,aAAf,YACA,kBAACI,EAAA,EAAIC,KAAL,CAAUL,KAAK,YAAf,WACA,kBAACM,EAAA,EAAD,CAAaC,MAAM,WAAWV,GAAG,2BAC7B,kBAACS,EAAA,EAAYE,KAAb,CAAkBR,KAAK,eAAvB,UACA,kBAACM,EAAA,EAAYE,KAAb,CAAkBR,KAAK,eAAvB,kBACA,kBAACM,EAAA,EAAYE,KAAb,CAAkBR,KAAK,eAAvB,aACA,kBAACM,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBR,KAAK,eAAvB,yBClBjBU,EAVA,SAACnC,GACZ,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCMGoC,MAbf,WACE,OACE,yBAAKnC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,MAGA,kBAAC,EAAD,SCFYoC,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5B,SAAS6B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d9ee13de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avataaars.81899e18.svg\";","import React from 'react';\r\nimport { FaStar } from \"react-icons/fa\";\r\n\r\n/**\r\n* @author\r\n* @function Hero\r\n**/\r\n\r\nconst Hero = (props) => {\r\n    return (\r\n        <div className=\"masthead bg-primary text-white text-center\">\r\n            <div className=\"container d-flex align-items-center flex-column\">\r\n                <img className=\"masthead-avatar mb-5\" src={require(`../../../assets/img/avataaars.svg`)} alt=\"\" />\r\n                <h1 className=\"masthead-heading text-uppercase mb-0\">Start Bootstrap</h1>\r\n                <div className=\"divider-custom divider-light\">\r\n                    <div className=\"divider-custom-line\"></div>\r\n                    <div className=\"divider-custom-icon\">\r\n                        <FaStar />\r\n                    </div>\r\n                    <div className=\"divider-custom-line\"></div>\r\n                </div>\r\n                <p className=\"masthead-subheading font-weight-light mb-0\">Graphic Artist - Web Designer - Illustrator</p>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Hero","import React, { useState, useEffect } from 'react'\r\nimport { Navbar, Nav, Container, NavDropdown } from 'react-bootstrap'\r\n/**\r\n* @author\r\n* @function MainHeader \r\n**/\r\n\r\nconst MainHeader = (props) => {\r\n    const [show, setShow] = useState(true);\r\n    const [position, setPosition] = useState(0);\r\n    useEffect(() => {\r\n        handle();\r\n        window.addEventListener('scroll', handle);\r\n        return () => {\r\n            window.removeEventListener('scroll', handle);\r\n        }\r\n    }, [position])\r\n    const handle = () => {\r\n        setPosition(document.body.getBoundingClientRect().top);\r\n        setShow(document.body.getBoundingClientRect().top > position)\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navbar collapseOnSelect expand=\"lg\" className=\"navbar navbar-expand-lg bg-secondary text-uppercase {show ? 'sticky' : 'hidden'}\" id=\"mainNav\">\r\n                <Container>\r\n                    <Navbar.Brand href=\"#home\">Bootstrap</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" className=\"bg-primary text-white\" />\r\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                        <Nav className=\"ml-auto\">\r\n                            <Nav.Link href=\"#features\">Features</Nav.Link>\r\n                            <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\r\n                            <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\r\n                                <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n                                <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n                                <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n                                <NavDropdown.Divider />\r\n                                <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n                            </NavDropdown>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default MainHeader","import React from 'react';\r\nimport Hero from './Hero';\r\nimport MainHeader from './MainHeader';\r\n\r\n\r\n/**\r\n* @author\r\n* @function Header\r\n**/\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <>\r\n            <MainHeader />\r\n            <Hero />\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Header","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Header from './Component/Header';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Switch>\n          {/* <Route path='/' extact component={} /> */}\n        </Switch>\n        <Header />\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}